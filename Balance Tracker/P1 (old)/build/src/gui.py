
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

import sys

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

OUTPUT_PATH = Path(__file__).parent.parent
ASSETS_PATH = OUTPUT_PATH / "assets" / "frame0"
DBF_PATH = OUTPUT_PATH / "data"

# Append the path to import the database functions (dbf.py)
sys.path.append(str(DBF_PATH))
from dbf import * # type: ignore
from functions import *

# Create the path to the database and check if it exist
DB_PATH = DBF_PATH / "transactions.db"
if not DB_PATH.exists():
    initialize_db("transactions_history", 1_000) # type: ignore

# Build assets path
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


# Initialize variables to collect transaction amount
transaction_expense: float = 0.00
transaction_income: float = 0.00

# Handles submission of transaction amounts and updates global variables and canvas display accordingly
def submit_transaction() -> None:

    global transaction_expense
    global transaction_income

    # Retrieve the new transaction name, amount and data entered by the user
    newT_name = entry_1.get()
    newT_amount = float(entry_2.get().replace(",", ".")) # Format amount for Python decimals declaration standard
    newT_date = entry_3.get()

    hidden_code_handler(newT_name)
    
    last_balance_raw: list[tuple] = collect_balance("transactions_history") # type: ignore
    last_balance: float = last_balance_raw[0]

    # Check if the transaction amount is positive (income)
    if newT_amount > 0:
        total_income_raw: float = collect_income_total("transactions_history") # type: ignore
        total_income: float = [float(value[0]) for value in total_income_raw]
        total_income: float = sum(total_income)
        # If positive, add it to the transaction income
        total_income += newT_amount
        # Update the displayed income on the canvas
        canvas.itemconfig(tagOrId=income, text=f"{total_income:,.2f}€")

    # Check if the transaction amount is negative (expense)
    elif newT_amount < 0:
        total_expense_raw: float = collect_expense_total("transactions_history") # type: ignore
        total_expense: float = [float(value[0]) for value in total_expense_raw]
        total_expense: float = sum(total_expense)
        # If negative, add it to the transaction expense
        total_expense += newT_amount
        # Update the displayed expense on the canvas
        canvas.itemconfig(tagOrId=expense, text=f"{total_expense:,.2f}€")

    # Update the balance label by adding income and subtracting expenses
    update_balance = last_balance + newT_amount

    # Update the displayed balance on the canvas
    canvas.itemconfig(tagOrId=balance, text=f"{update_balance:,.2f}€")

    # Add the new transaction to the database
    add_transaction(table="transactions_history", name=newT_name, amount=newT_amount, date=newT_date) # type: ignore



window = Tk()

window.geometry("640x480")
window.configure(bg = "#FFFFFF")



canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 480,
    width = 640,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    0.0,
    640.0,
    96.0,
    fill="#00317B",
    outline="")

canvas.create_text(
    24.0,
    29.0,
    anchor="nw",
    text="Balance Tracker",
    fill="#FFFFFF",
    font=("Ubuntu", 32 * -1, "bold")
)



image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    176.0,
    160.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    320.0,
    240.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    464.0,
    160.0,
    image=image_image_3
)



canvas.create_text(
    72.0,
    137.0,
    anchor="nw",
    text="Income",
    fill="#604500",
    font=("Ubuntu", 12 * -1, "bold")
)

canvas.create_text(
    72.0,
    217.0,
    anchor="nw",
    text="Balance",
    fill="#0A4B00",
    font=("Ubuntu", 12 * -1, "bold")
)

canvas.create_text(
    360.0,
    137.0,
    anchor="nw",
    text="Expenses",
    fill="#660000",
    font=("Ubuntu", 12 * -1, "bold")
)

total_income_raw: float = collect_income_total("transactions_history") # type: ignore
total_income: float = [float(value[0]) for value in total_income_raw]
total_income: float = sum(total_income)
income = canvas.create_text(
    72.0,
    152.0,
    anchor="nw",
    text=f"{total_income:,.2f}€",
    fill="#4F4500",
    font=("Ubuntu", 24 * -1, "bold")
)

last_balance_raw: list[tuple] = collect_balance("transactions_history") # type: ignore
last_balance: float = last_balance_raw[0]
balance = canvas.create_text(
    72.0,
    232.0,
    anchor="nw",
    text=f"{last_balance:,.2f}€",
    fill="#0A4B00",
    font=("Ubuntu", 24 * -1, "bold")
)

total_expense_raw: float = collect_expense_total("transactions_history") # type: ignore
total_expense: float = [float(value[0]) for value in total_expense_raw]
total_expense: float = sum(total_expense)
expense = canvas.create_text(
    360.0,
    152.0,
    anchor="nw",
    text=f"{total_expense:,.2f}€",
    fill="#660000",
    font=("Ubuntu", 24 * -1, "bold")
)

canvas.create_text(
    250.0,
    310.0,
    anchor="nw",
    text="Add Transaction\n",
    fill="#00317B",
    font=("Ubuntu", 16 * -1, "bold")
)

canvas.create_text(
    72.0,
    334.0,
    anchor="nw",
    text="Name\n",
    fill="#6682AD",
    font=("Ubuntu", 12 * -1, "bold")
)

canvas.create_text(
    344.0,
    334.0,
    anchor="nw",
    text="Amount (€)\n",
    fill="#6682AD",
    font=("Ubuntu", 12 * -1, "bold")
)



entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    176.0,
    368.0,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=64.0,
    y=352.0,
    width=224.0,
    height=30.0
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    384.0,
    368.0,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=336.0,
    y=352.0,
    width=96.0,
    height=30.0
)



canvas.create_text(
    488.0,
    335.0,
    anchor="nw",
    text="Date\n",
    fill="#6682AD",
    font=("Ubuntu", 12 * -1, "bold")
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    528.0,
    368.0,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=480.0,
    y=352.0,
    width=96.0,
    height=30.0
)



button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: submit_transaction(),
    relief="flat"
)
button_1.place(
    x=48.0,
    y=400.0,
    width=544.0,
    height=48.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat"
)
button_2.place(
    x=616.0,
    y=456.0,
    width=16.0,
    height=16.0
)



image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    590.0,
    48.0,
    image=image_image_4
)



window.resizable(False, False)
window.mainloop()